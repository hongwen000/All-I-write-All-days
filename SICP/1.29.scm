(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a)
       (sum term (next a) next b))))
(define (cube x) (* x x x))
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))
;(define (simpson f a b n)
;  (let ((h (/ (- b a) n)))
;    (define (y k) (f (+ a
;                        (* k h))))
;    (define (simpson-helper f a b n k)
;      (cond ((= k n) (y k))
;            ((= k 0) (+ (y k) (simpson-helper f a b n (+ k 1))))
;            ((odd? k) (+ (* 4 (y k)) (simpson-helper f a b n (+ k 1))))
;            (else (+ (* 2 (y k))) (simpson-helper f a b n (+ k 1)))))
;    (* (/ h 3.0) (simpson-helper f a b n 0))))
(define (simpson-sum f a b n)
  (let ((h (/ (- b a) n)))
    (define (y k) (f (+ a (* k h))))
    (define (g k)
      (cond ((or (= k n) (= k 0)) (y k))
            ((odd? k) (* 4 (y k)))
            (else (* 2 (y k)))))
    (* (/ h 3.0) 
       (sum g 0 (lambda (x) (+ 1 x)) n))))
