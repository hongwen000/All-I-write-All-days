(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
        (display guess)
        (newline)
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))
(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))
(define dx 0.00001)
(define (cube x) (* x x x))
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x)
            ((deriv g) x)
         )
    )
  )
)
(define (newton-method g guess)
  (fixed-point (newton-transform g) guess))
(define (my-sqrt x)
  (newton-method (lambda (y) (- (square y) x))
                 1.0))
