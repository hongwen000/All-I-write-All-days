#lang sicp
(define (make-rat n d) (cons n d))
(define (number x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (number x))
  (display "/")
  (display (denom x)))
(define (binop-rat x y op1 op2)
  (make-rat (op1 (op2 (number x) (denom y))
                 (op2 (number y) (denom x)))
            (op2 (denom x) (denom y))))
(define (add-rat x y)
  (binop-rat x y + *))
(define (sub-rat x y)
  (binop-rat x y - *))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
